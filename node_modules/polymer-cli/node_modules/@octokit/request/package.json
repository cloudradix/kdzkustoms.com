{
  "_args": [
    [
      "@octokit/request@https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
      "/home/bblock/Webdev/PWA/shop/node_modules/polymer-cli"
    ]
  ],
  "_from": "@octokit/request@https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
  "_id": "@octokit/request@2.2.1",
  "_inCache": true,
  "_location": "/polymer-cli/@octokit/request",
  "_phantomChildren": {},
  "_requested": {
    "name": "@octokit/request",
    "raw": "@octokit/request@https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
    "rawSpec": "https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
    "scope": "@octokit",
    "spec": "https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli/@octokit/rest"
  ],
  "_resolved": "https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
  "_shasum": "1b445e3052842b1f3ab94d68e2606840c85b4265",
  "_shrinkwrap": null,
  "_spec": "@octokit/request@https://registry.npmjs.org/@octokit/request/-/request-2.2.1.tgz",
  "_where": "/home/bblock/Webdev/PWA/shop/node_modules/polymer-cli",
  "author": {
    "name": "Gregor Martynus",
    "url": "https://github.com/gr2m"
  },
  "browser": {
    "./lib/get-request-agent.js": false,
    "./lib/request/get-buffer-response.js": "./lib/request/get-buffer-response-browser.js"
  },
  "bugs": {
    "url": "https://github.com/octokit/request.js/issues"
  },
  "bundlesize": [
    {
      "path": "./dist/octokit-request.min.js.gz",
      "maxSize": "5KB"
    }
  ],
  "dependencies": {
    "@octokit/endpoint": "^3.1.1",
    "is-plain-object": "^2.0.4",
    "node-fetch": "^2.3.0",
    "universal-user-agent": "^2.0.1"
  },
  "description": "Send parameterized requests to GitHub’s APIs with sensible defaults in browsers and Node",
  "devDependencies": {
    "chai": "^4.2.0",
    "compression-webpack-plugin": "^2.0.0",
    "coveralls": "^3.0.2",
    "cypress": "^3.1.0",
    "fetch-mock": "^7.2.0",
    "mkdirp": "^0.5.1",
    "mocha": "^5.2.0",
    "npm-run-all": "^4.1.3",
    "nyc": "^13.1.0",
    "semantic-release": "^15.10.5",
    "simple-mock": "^0.8.0",
    "standard": "^12.0.1",
    "webpack": "^4.22.0",
    "webpack-bundle-analyzer": "^3.0.3",
    "webpack-cli": "^3.1.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/octokit/request.js#readme",
  "keywords": [
    "api",
    "github",
    "octokit",
    "request"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "@octokit/request",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# request.js\n\n> Send parameterized requests to GitHub’s APIs with sensible defaults in browsers and Node\n\n[![@latest](https://img.shields.io/npm/v/@octokit/request.svg)](https://www.npmjs.com/package/@octokit/request)\n[![Build Status](https://travis-ci.org/octokit/request.js.svg?branch=master)](https://travis-ci.org/octokit/request.js)\n[![Coverage Status](https://coveralls.io/repos/github/octokit/request.js/badge.svg)](https://coveralls.io/github/octokit/request.js)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/request.js.svg)](https://greenkeeper.io/)\n\n`@octokit/request` is a request library for browsers & node that makes it easier\nto interact with [GitHub’s REST API](https://developer.github.com/v3/) and\n[GitHub’s GraphQL API](https://developer.github.com/v4/guides/forming-calls/#the-graphql-endpoint).\n\nIt uses [`@octokit/endpoint`](https://github.com/octokit/endpoint.js) to parse\nthe passed options and sends the request using [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n ([node-fetch](https://github.com/bitinn/node-fetch) in Node).\n\n<!-- update table of contents by running `npx markdown-toc README.md -i` -->\n\n<!-- toc -->\n\n- [Usage](#usage)\n  * [Node](#node)\n  * [Browser](#browser)\n  * [REST API example](#rest-api-example)\n  * [GraphQL example](#graphql-example)\n  * [Alternative: pass `method` & `url` as part of options](#alternative-pass-method--url-as-part-of-options)\n- [octokitRequest()](#octokitrequest)\n- [`octokitRequest.defaults()`](#octokitrequestdefaults)\n- [`octokitRequest.endpoint`](#octokitrequestendpoint)\n- [Special cases](#special-cases)\n  * [The `data` parameter – set request body directly](#the-data-parameter-%E2%80%93-set-request-body-directly)\n  * [Set parameters for both the URL/query and the request body](#set-parameters-for-both-the-urlquery-and-the-request-body)\n- [LICENSE](#license)\n\n<!-- tocstop -->\n\n## Usage\n\n### Node\n\nInstall with `npm install @octokit/request`.\n\n```js\nconst octokitRequest = require('@octokit/request')\n```\n\n### Browser\n\n1. Download `octokit-request.min.js` from the latest release: https://github.com/octokit/request.js/releases\n\n2. Load it as script into your web application:\n\n   ```html\n   <script src=\"request-rest.min.js\"></script>\n   ```\n\n3. The `octokitRequest` is now available\n\n### REST API example\n\n```js\n// Following GitHub docs formatting:\n// https://developer.github.com/v3/repos/#list-organization-repositories\nconst result = await octokitRequest('GET /orgs/:org/repos', {\n  headers: {\n    authorization: 'token 0000000000000000000000000000000000000001'\n  },\n  org: 'octokit',\n  type: 'private'\n})\n\nconsole.log(`${result.data.length} repos found.`)\n```\n\n### GraphQL example\n\n```js\nconst result = await octokitRequest('POST /graphql', {\n  headers: {\n    authorization: 'token 0000000000000000000000000000000000000001'\n  },\n  query: `query ($login: String!) {\n    organization(login: $login) {\n      repositories(privacy: PRIVATE) {\n        totalCount\n      }\n    }\n  }`,\n  variables: {\n    login: 'octokit'\n  }\n})\n```\n\n### Alternative: pass `method` & `url` as part of options\n\nAlternatively, pass in a method and a url\n\n```js\nconst result = await octokitRequest({\n  method: 'GET',\n  url: '/orgs/:org/repos',\n  headers: {\n    authorization: 'token 0000000000000000000000000000000000000001'\n  },\n  org: 'octokit',\n  type: 'private'\n})\n```\n\n## octokitRequest()\n\n`octokitRequest(route, options)` or `octokitRequest(options)`.\n\n**Options**\n\n<table>\n  <thead>\n    <tr>\n      <th align=left>\n        name\n      </th>\n      <th align=left>\n        type\n      </th>\n      <th align=left>\n        description\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=left>\n      <code>route</code>\n    </th>\n    <td>\n      String\n    </td>\n    <td>\n      If <code>route</code> is set it has to be a string consisting of the request method and URL, e.g. <code>GET /orgs/:org</code>\n    </td>\n  </tr>\n  <tr>\n    <th align=left>\n      <code>options.baseUrl</code>\n    </th>\n    <td>\n      String\n    </td>\n    <td>\n      <strong>Required.</strong> Any supported <a href=\"https://developer.github.com/v3/#http-verbs\">http verb</a>, case insensitive. <em>Defaults to <code>https://api.github.com</code></em>.\n    </td>\n  </tr>\n    <th align=left>\n      <code>options.headers</code>\n    </th>\n    <td>\n      Object\n    </td>\n    <td>\n      Custom headers. Passed headers are merged with defaults:<br>\n      <em><code>headers['user-agent']</code> defaults to <code>octokit-rest.js/1.2.3</code> (where <code>1.2.3</code> is the released version)</em>.<br>\n      <em><code>headers['accept']</code> defaults to <code>application/vnd.github.v3+json</code>.<br>\n    </td>\n  </tr>\n  <tr>\n    <th align=left>\n      <code>options.method</code>\n    </th>\n    <td>\n      String\n    </td>\n    <td>\n      <strong>Required.</strong> Any supported <a href=\"https://developer.github.com/v3/#http-verbs\">http verb</a>, case insensitive. <em>Defaults to <code>Get</code></em>.\n    </td>\n  </tr>\n  <tr>\n    <th align=left>\n      <code>options.url</code>\n    </th>\n    <td>\n      String\n    </td>\n    <td>\n      <strong>Required.</strong> A path or full URL which may contain <code>:variable</code> or <code>{variable}</code> placeholders,\n      e.g. <code>/orgs/:org/repos</code>. The <code>url</code> is parsed using <a href=\"https://github.com/bramstein/url-template\">url-template</a>.\n    </td>\n  </tr>\n  <tr>\n    <th align=left>\n      <code>options.data</code>\n    </th>\n    <td>\n      Any\n    </td>\n    <td>\n      Set request body directly instead of setting it to JSON based on additional parameters. See <a href=\"#data-parameter\">\"The `data` parameter\"</a> below.\n    </td>\n  </tr>\n  <tr>\n    <th align=left>\n      <code>options.request</code>\n    </th>\n    <td>\n      Object\n    </td>\n    <td>\n     Pass <a href=\"https://github.com/bitinn/node-fetch#options\">node-fetch extensions options</a>, such as <code>agent</code> or <code>timeout</code>. All other `options.request.*` keys will be ignored.\n    </td>\n  </tr>\n</table>\n\nAll other options will passed depending on the `method` and `url` options.\n\n1. If the option key is a placeholder in the `url`, it will be used as replacement. For example, if the passed options are `{url: '/orgs/:org/repos', org: 'foo'}` the returned `options.url` is `https://api.github.com/orgs/foo/repos`\n2. If the `method` is `GET` or `HEAD`, the option is passed as query parameter\n3. Otherwise the parameter is passed in the request body as JSON key.\n\n**Result**\n\n`octokitRequest` returns a promise and resolves with 3 keys\n\n<table>\n  <thead>\n    <tr>\n      <th align=left>\n        key\n      </th>\n      <th align=left>\n        type\n      </th>\n      <th align=left>\n        description\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <th align=left><code>headers</code></th>\n    <td>Object</td>\n    <td>All response headers</td>\n  </tr>\n  <tr>\n    <th align=left><code>code</code></th>\n    <td>Integer</td>\n    <td>Response status code</td>\n  </tr>\n  <tr>\n    <th align=left><code>data</code></th>\n    <td>Any</td>\n    <td>The response body as returned from server. If the response is JSON then it will be parsed into an object</td>\n  </tr>\n</table>\n\nIf an error occurs, the `error` instance has additional properties to help with debugging\n\n- `error.status` The http response status code\n- `error.headers` The http response headers as an object\n- `error.request` The request options such as `method`, `url` and `data`\n\n## `octokitRequest.defaults()`\n\nOverride or set default options. Example:\n\n```js\nconst myOctokitRequest = require('@octokit/request').defaults({\n  baseUrl: 'https://github-enterprise.acme-inc.com/api/v3',\n  headers: {\n    'user-agent': 'myApp/1.2.3',\n    authorization: `token 0000000000000000000000000000000000000001`\n  },\n  org: 'my-project',\n  per_page: 100\n})\n\nmyOctokitRequest(`GET /orgs/:org/repos`)\n```\n\nYou can call `.defaults()` again on the returned method, the defaults will cascade.\n\n```js\nconst myProjectRequest = octokitRequest.defaults({\n  baseUrl: 'https://github-enterprise.acme-inc.com/api/v3',\n  headers: {\n    'user-agent': 'myApp/1.2.3'\n  },\n  org: 'my-project'\n})\nconst myProjectRequestWithAuth = myProjectRequest.defaults({\n  headers: {\n    authorization: `token 0000000000000000000000000000000000000001`\n  }\n})\n```\n\n`myProjectRequest` now defaults the `baseUrl`, `headers['user-agent']`,\n`org` and `headers['authorization']` on top of `headers['accept']` that is set\nby the global default.\n\n## `octokitRequest.endpoint`\n\nSee https://github.com/octokit/endpoint.js. Example\n\n```js\nconst options = octokitRequest.endpoint('GET /orgs/:org/repos', {\n  org: 'my-project',\n  type: 'private'\n})\n\n// {\n//   method: 'GET',\n//   url: 'https://api.github.com/orgs/my-project/repos?type=private',\n//   headers: {\n//     accept: 'application/vnd.github.v3+json',\n//     authorization: 'token 0000000000000000000000000000000000000001',\n//     'user-agent': 'octokit/endpoint.js v1.2.3'\n//   }\n// }\n```\n\nAll of the [`@octokit/endpoint`](https://github.com/octokit/endpoint.js) API can be used:\n\n- [`ocotkitRequest.endpoint()`](#endpoint)\n- [`ocotkitRequest.endpoint.defaults()`](#endpointdefaults)\n- [`ocotkitRequest.endpoint.merge()`](#endpointdefaults)\n- [`ocotkitRequest.endpoint.parse()`](#endpointmerge)\n\n## Special cases\n\n<a name=\"data-parameter\"></a>\n### The `data` parameter – set request body directly\n\nSome endpoints such as [Render a Markdown document in raw mode](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode) don’t have parameters that are sent as request body keys, instead the request body needs to be set directly. In these cases, set the `data` parameter.\n\n```js\nconst options = endpoint('POST /markdown/raw', {\n  data: 'Hello world github/linguist#1 **cool**, and #1!',\n  headers: {\n    accept: 'text/html;charset=utf-8',\n    'content-type': 'text/plain'\n  }\n})\n\n// options is\n// {\n//   method: 'post',\n//   url: 'https://api.github.com/markdown/raw',\n//   headers: {\n//     accept: 'text/html;charset=utf-8',\n//     'content-type': 'text/plain',\n//     'user-agent': userAgent\n//   },\n//   body: 'Hello world github/linguist#1 **cool**, and #1!'\n// }\n```\n\n### Set parameters for both the URL/query and the request body\n\nThere are API endpoints that accept both query parameters as well as a body. In that case you need to add the query parameters as templates to `options.url`, as defined in the [RFC 6570 URI Template specification](https://tools.ietf.org/html/rfc6570).\n\nExample\n\n```js\noctokitRequest('POST https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}', {\n  name: 'example.zip',\n  label: 'short description',\n  headers: {\n    'content-type': 'text/plain',\n    'content-length': 14,\n    authorization: `token 0000000000000000000000000000000000000001`\n  },\n  data: 'Hello, world!'\n})\n```\n\n\n\n## LICENSE\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "release": {
    "publish": [
      "@semantic-release/npm",
      {
        "path": "@semantic-release/github",
        "assets": [
          "dist/*",
          "!dist/*.map.gz"
        ]
      }
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/request.js.git"
  },
  "scripts": {
    "build": "npm-run-all build:*",
    "build:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-request.js --profile --json > dist/bundle-stats.json",
    "build:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-request.min.js --devtool source-map",
    "bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
    "coverage": "nyc report --reporter=html && open coverage/index.html",
    "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
    "prebuild": "mkdirp dist/",
    "pretest": "standard",
    "semantic-release": "semantic-release",
    "test": "nyc mocha test/*-test.js",
    "test:browser": "cypress run --browser chrome"
  },
  "standard": {
    "globals": [
      "after",
      "afterEach",
      "before",
      "beforeEach",
      "describe",
      "expect",
      "it"
    ]
  },
  "version": "2.2.1"
}
