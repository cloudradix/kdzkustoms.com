{
  "_args": [
    [
      "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
      "/home/bblock/Webdev/PWA/shop/node_modules/polymer-cli"
    ]
  ],
  "_from": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
  "_id": "@octokit/rest@16.8.0",
  "_inCache": true,
  "_location": "/polymer-cli/@octokit/rest",
  "_phantomChildren": {},
  "_requested": {
    "name": "@octokit/rest",
    "raw": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
    "rawSpec": "https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
    "scope": "@octokit",
    "spec": "https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli"
  ],
  "_resolved": "https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
  "_shasum": "7d621a9f0d04178ba86c5c5d3792fa3e04a6409a",
  "_shrinkwrap": null,
  "_spec": "@octokit/rest@https://registry.npmjs.org/@octokit/rest/-/rest-16.8.0.tgz",
  "_where": "/home/bblock/Webdev/PWA/shop/node_modules/polymer-cli",
  "apidoc": {
    "template": {
      "withCompare": false
    }
  },
  "author": {
    "name": "Gregor Martynus",
    "url": "https://github.com/gr2m"
  },
  "bugs": {
    "url": "https://github.com/octokit/rest.js/issues"
  },
  "bundlesize": [
    {
      "path": "./dist/octokit-rest.min.js.gz",
      "maxSize": "33 kB"
    }
  ],
  "contributors": [
    {
      "name": "Mike de Boer",
      "email": "info@mikedeboer.nl"
    },
    {
      "name": "Fabian Jakobs",
      "email": "fabian@c9.io"
    },
    {
      "name": "Joe Gallo",
      "email": "joe@brassafrax.com"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://github.com/gr2m"
    }
  ],
  "dependencies": {
    "@octokit/request": "2.2.1",
    "before-after-hook": "^1.2.0",
    "btoa-lite": "^1.0.0",
    "lodash.get": "^4.4.2",
    "lodash.pick": "^4.4.0",
    "lodash.set": "^4.3.2",
    "lodash.uniq": "^4.5.0",
    "octokit-pagination-methods": "^1.1.0",
    "universal-user-agent": "^2.0.0",
    "url-template": "^2.0.8"
  },
  "description": "GitHub REST API client for Node.js",
  "devDependencies": {
    "@gimenete/type-writer": "^0.1.3",
    "@octokit/fixtures-server": "^5.0.1",
    "@octokit/routes": "17.0.0",
    "@types/node": "^10.1.2",
    "apidoc": "^0.17.6",
    "bundlesize": "^0.17.0",
    "chai": "^4.1.2",
    "compression-webpack-plugin": "^2.0.0",
    "coveralls": "^3.0.0",
    "cypress": "^3.0.0",
    "dotenv": "^6.0.0",
    "gh-pages-with-token": "^1.0.0",
    "glob": "^7.1.2",
    "http-proxy-agent": "^2.1.0",
    "lodash.camelcase": "^4.3.0",
    "lodash.merge": "^4.6.1",
    "lodash.upperfirst": "^4.3.1",
    "mkdirp": "^0.5.1",
    "mocha": "^5.0.0",
    "mustache": "^3.0.0",
    "nock": "^10.0.0",
    "npm-run-all": "^4.1.2",
    "nyc": "^12.0.1",
    "prettier": "^1.14.2",
    "proxy": "^0.2.4",
    "semantic-release": "^15.0.0",
    "sinon": "^6.0.0",
    "sinon-chai": "^3.0.0",
    "sort-keys": "^2.0.0",
    "standard": "^12.0.0",
    "string-to-arraybuffer": "^1.0.0",
    "typescript": "^2.9.2",
    "webpack": "^4.0.0",
    "webpack-bundle-analyzer": "^3.0.0",
    "webpack-cli": "^3.0.0"
  },
  "files": [
    "index.d.ts",
    "index.js",
    "lib",
    "plugins"
  ],
  "homepage": "https://github.com/octokit/rest.js#readme",
  "keywords": [
    "api-client",
    "github",
    "octokit",
    "rest"
  ],
  "license": "MIT",
  "name": "@octokit/rest",
  "nyc": {
    "ignore": [
      "test"
    ]
  },
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# rest.js\n\n> GitHub REST API client for JavaScript\n\n[![@latest](https://img.shields.io/npm/v/@octokit/rest.svg)](https://www.npmjs.com/package/@octokit/rest)\n[![Build Status](https://travis-ci.org/octokit/rest.js.svg?branch=master)](https://travis-ci.org/octokit/rest.js)\n[![Coverage Status](https://coveralls.io/repos/github/octokit/rest.js/badge.svg)](https://coveralls.io/github/octokit/rest.js)\n[![Greenkeeper](https://badges.greenkeeper.io/octokit/rest.js.svg)](https://greenkeeper.io/)\n\n<!-- toc -->\n\n- [Usage](#usage)\n  * [Node](#node)\n  * [Browser](#browser)\n  * [Client options](#client-options)\n- [API docs](#api-docs)\n- [API Previews](#api-previews)\n- [Authentication](#authentication)\n- [Custom requests](#custom-requests)\n- [Pagination](#pagination)\n- [Hooks](#hooks)\n- [Plugins](#plugins)\n- [Register custom endpoint methods](#register-custom-endpoint-methods)\n- [Throttling](#throttling)\n- [Automatic retries](#automatic-retries)\n- [Debug](#debug)\n- [Contributing](#contributing)\n- [Credits](#credits)\n- [LICENSE](#license)\n\n<!-- tocstop -->\n\n## Usage\n\n### Node\n\nInstall with `npm install @octokit/rest`.\n\n```js\nconst octokit = require('@octokit/rest')()\n\n// Compare: https://developer.github.com/v3/repos/#list-organization-repositories\noctokit.repos.listForOrg({\n  org: 'octokit',\n  type: 'public'\n}).then(({ data, headers, status }) => {\n  // handle data\n})\n```\n\n### Browser\n\n1. Download `octokit-rest.min.js` from the latest release: https://github.com/octokit/rest.js/releases\n\n2. Load it as script into your web application:\n\n   ```html\n   <script src=\"octokit-rest.min.js\"></script>\n   ```\n\n3. Initialize `octokit`\n\n   ```js\n   const octokit = new Octokit()\n\n   // Compare: https://developer.github.com/v3/repos/#list-organization-repositories\n   octokit.repos.getForOrg({\n     org: 'octokit',\n     type: 'public'\n   }).then(({data, headers, status}) => {\n     // handle data\n   })\n   ```\n\n### Client options\n\nAll available client options with default values\n\n<!-- HEADS UP: when changing the options for the constructor, make sure to also\n     update the type definition templates in scripts/templates/* -->\n```js\nconst octokit = require('@octokit/rest')({\n  timeout: 0, // 0 means no request timeout\n  headers: {\n    accept: 'application/vnd.github.v3+json',\n    'user-agent': 'octokit/rest.js v1.2.3' // v1.2.3 will be current version\n  },\n\n  // custom GitHub Enterprise URL\n  baseUrl: 'https://api.github.com',\n\n  // Node only: advanced request options can be passed as http(s) agent\n  agent: undefined\n})\n```\n\n## API docs\n\nFind all APIs documented at https://octokit.github.io/rest.js/.\n\n## API Previews\n\nTo take advantage of [GitHub’s API Previews](https://developer.github.com/v3/previews/),\npass a custom `accept` header, which you can do with any endpoint method documented\nin the [API docs](https://octokit.github.io/rest.js/), e.g.\n\n```js\nconst { data: { topics } } = await octokit.repos.get({\n  owner: 'octokit',\n  repo: 'rest.js',\n  headers: {\n    accept: 'application/vnd.github.mercy-preview+json'\n  }\n})\n```\n\nMultiple preview headers can be combined by separating them with commas\n\n```js\nconst { data: { topics, codeOfConduct } } = await octokit.repos.get({\n  owner: 'octokit',\n  repo: 'rest.js',\n  headers: {\n    accept: 'application/vnd.github.mercy-preview+json,application/vnd.github.scarlet-witch-preview+json'\n  }\n})\n```\n\n## Authentication\n\nMost GitHub API calls don't require authentication. Rules of thumb:\n\n1. If you can see the information by visiting the site without being logged in, you don't have to be authenticated to retrieve the same information through the API.\n2. If you want to change data, you have to be authenticated.\n\n```javascript\n// basic\noctokit.authenticate({\n  type: 'basic',\n  username: 'yourusername',\n  password: 'password'\n})\n\n// oauth\noctokit.authenticate({\n  type: 'oauth',\n  token: 'secrettoken123'\n})\n\n// oauth key/secret (to get a token or increase higher rate limit for server-server requests)\noctokit.authenticate({\n  type: 'oauth',\n  key: 'client_id',\n  secret: 'client_secret'\n})\n\n// token (https://github.com/settings/tokens)\noctokit.authenticate({\n  type: 'token',\n  token: 'secrettoken123'\n})\n\n// GitHub app\noctokit.authenticate({\n  type: 'app',\n  token: 'secrettoken123'\n})\n```\n\nNote: `authenticate` is synchronous because it only sets the credentials\nfor the following requests.\n\n## Custom requests\n\nTo send custom requests you can use the lower-level `octokit.request()` method\n\n```js\noctokit.request('GET /')\n```\n\nThe `baseUrl`, headers and other defaults are already set. For more information\non the `octokit.request()` API see [`@octokit/request`](https://github.com/octokit/request.js/)\n\nAll the endpoint methods such as `octokit.repos.get()` are aliases of `octokit.request()`\nwith pre-bound default options. So you can use the `@octokit/request` API to\nget the default options or get generic request option to use with your preferred\nrequest library.\n\n```js\nconst defaultOptions = octokit.repos.get.endpoint.DEFAULTS\nconst requestOptions = octokit.repos.get.endpoint()\n```\n\n## Pagination\n\nAll endpoint methods starting with `.list*` do not return all responses at once but instead return the first 30 items by default, see also [GitHub’s REST API pagination documentation](https://developer.github.com/v3/#pagination).\n\nTo automatically receive all results across all pages, you can use the `octokit.paginate()` method:\n\n```js\noctokit.paginate('GET /repos/:owner/:repo/issues', { owner: 'octokit', repo: 'rest.js' })\n  .then(issues => {\n    // issues is an array of all issue objects\n  })\n```\n\n`octokit.paginate()` accepts the same options as [`octokit.request()`](#customrequests). You can optionally pass an additional function to map the results from each response. The map must return a new value, usually an array with mapped data.\n\n```js\noctokit.paginate('GET /repos/:owner/:repo/issues', { owner: 'octokit', repo: 'rest.js' }, response => response.data.map(issue => issue.title))\n  .then(issueTitles => {\n    // issueTitles is now an array with the titles only\n  })\n```\n\nTo stop paginating early, you can call the `done()` function passed as 2nd argument to the response map function. Note that you still have to return the value you want to map the response to, otherwise the last response will be mapped to undefined.\n\n```js\noctokit.paginate('GET /organizations', (response, done) => {\n  if (response.data.find(issues => issue.body.includes('something'))) {\n    done()\n  }\n  return response.data\n})\n```\n\nTo paginate responses for one of the registered endpoint methods such as `octokit.issues.listForRepo()` you can use the [`.endpoint.merge()`](https://github.com/octokit/endpoint.js#endpointmerge) method registered for all endpoint methods:\n\n```js\nconst options = octokit.issues.listForRepo.endpoint.merge({ owner: 'octokit', repo: 'rest.js' })\noctokit.paginate(options)\n  .then(issues => {\n    // issues is an array of all issue objects\n  })\n```\n\nIf your runtime environment supports async iterators (such as Node 10+), you can iterate through each response\n\n```js\nfor await (const response of octokit.paginate.iterator(options)) {\n  // do whatever you want with each response, break out of the loop, etc.\n}\n```\n\n`octokit.paginate.iterator()` accepts the same options as `octokit.paginate()`.\n\n## Hooks\n\nYou can customize Octokit’s request lifecycle with hooks. Available methods are\n\n```js\ngithub.hook.before('request', async (options) => {\n  validate(options)\n})\ngithub.hook.after('request', async (response, options) => {\n  console.log(`${options.method} ${options.url}: ${response.status}`)\n})\ngithub.hook.error('request', async (error, options) => {\n  if (error.status === 304) {\n    return findInCache(error.headers.etag)\n  }\n\n  throw error\n})\ngithub.hook.wrap('request', async (request, options) => {\n  // add logic before, after, catch errors or replace the request altogether\n  return request(options)\n})\n```\n\nSee [before-after-hook](https://github.com/gr2m/before-after-hook#readme) for more\ndocumentation on hooks.\n\n## Plugins\n\nYou can customize and extend Octokit’s functionality using plugins\n\n```js\n// index.js\nconst MyOctokit = require('@octokit/request')\n  .plugin([\n    require('./lib/my-plugin'),\n    require('octokit-plugin-example')\n  ])\n\n// lib/my-plugin.js\nmodule.exports = (octokit, options = { greeting: 'Hello' }) => {\n  // add a custom method\n  octokit.helloWorld = () => console.log(`${options.greeting}, world!`)\n\n  // hook into the request lifecycle\n  octokit.hook.wrap('request', async (request, options) => {\n    const time = Date.now()\n    const response = await request(options)\n    console.log(`${options.method} ${options.url} – ${response.status} in ${Date.now() - time}ms`)\n    return response\n  })\n}\n```\n\n`.plugin` accepts a function or an array of functions.\n\nYou can add new methods to the `octokit` instance passed as the first argument to\nthe plugin function. The 2nd argument is the options object passed to the\nconstructor when instantiating the `octokit` client.\n\n```js\nconst octokit = new MyOctokit({ greeting: 'Hola' })\noctokit.helloWorld()\n// Hola, world!\n```\n\n## Register custom endpoint methods\n\nYou can register custom endpoint methods such as `octokit.repos.get()` using\nthe `octokit.registerEndpoints(routes)` method\n\n```js\noctokit.registerEndpoints({\n  foo: {\n    bar: {\n      method: 'PATCH',\n      url: '/repos/:owner/:repo/foo',\n      headers: {\n        accept: 'application/vnd.github.foo-bar-preview+json'\n      },\n      params: {\n        owner: {\n          required: true,\n          type: 'string'\n        },\n        repo: {\n          required: true,\n          type: 'string'\n        },\n        baz: {\n          required: true,\n          type: 'string',\n          enum: [\n            'qux',\n            'quux',\n            'quuz'\n          ]\n        }\n      }\n    }\n  }\n})\n\noctokit.foo.bar({\n  owner: 'octokit',\n  repo: 'rest.js',\n  baz: 'quz'\n})\n```\n\nThis is useful when you participate in private beta features and prefer the\nconvenience of methods for the new endpoints instead of using [`octokit.request()`]('#customrequests').\n\n## Throttling\n\nWhen you send too many requests in too little time you will likely hit errors due to quotas.\n\nIn order to automatically throttle requests as recommended in the [best practices for integrators](https://developer.github.com/v3/guides/best-practices-for-integrators/), we recommend you install the [`@octokit/plugin-throttling` plugin](https://github.com/octokit/plugin-throttling.js).\n\nThe `throttle.onAbuseLimit` and `throttle.onRateLimit` options are required. Return `true` to automatically retry the request after `retryAfter` seconds.\n\n```js\nconst Octokit = require('@octokit/rest')\n  .plugin(require('@octokit/plugin-throttling'))\n\nconst octokit = new Octokit({\n  throttle: {\n    onRateLimit: (retryAfter, options) => {\n      console.warn(`Request quota exhausted for request ${options.method} ${options.url}`)\n\n      if (options.request.retryCount === 0) { // only retries once\n        console.log(`Retrying after ${retryAfter} seconds!`)\n        return true\n      }\n    },\n    onAbuseLimit: (retryAfter, options) => {\n      // does not retry, only logs a warning\n      console.warn(`Abuse detected for request ${options.method} ${options.url}`)\n    }\n  }\n})\n\noctokit.authenticate({\n  type: 'token',\n  token: process.env.TOKEN\n})\n```\n\n## Automatic retries\n\nMany common request errors can be easily remediated by retrying the request. We recommend installing the [`@octokit/plugin-retry` plugin](https://github.com/octokit/plugin-retry.js) for Automatic retries in these cases\n\n```js\nconst Octokit = require('@octokit/rest')\n  .plugin(require('@octokit/plugin-retry'))\n\nconst octokit = new Octokit()\n\n// all requests sent with the `octokit` instance are now retried up to 3 times for recoverable errors.\n```\n\n## Debug\n\nSet `DEBUG=octokit:rest*` for additional debug logs.\n\n## Contributing\n\nWe would love you to contribute to `@octokit/rest`, pull requests are very welcomed! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## Credits\n\n`@octokit/rest` was originally created as [`node-github`](https://www.npmjs.com/package/github)\nin 2012 by Mike de Boer from Cloud9 IDE, Inc.\nIt was adopted and renamed by GitHub in 2017\n\n## LICENSE\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "release": {
    "publish": [
      "@semantic-release/npm",
      {
        "path": "@semantic-release/github",
        "assets": [
          "dist/*",
          "!dist/*.map.gz"
        ]
      }
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/octokit/rest.js.git"
  },
  "scripts": {
    "build": "npm-run-all build:*",
    "build:browser": "npm-run-all build:browser:*",
    "build:browser:development": "webpack --mode development --entry . --output-library=Octokit --output=./dist/octokit-rest.js --profile --json > dist/bundle-stats.json",
    "build:browser:production": "webpack --mode production --entry . --plugin=compression-webpack-plugin --output-library=Octokit --output-path=./dist --output-filename=octokit-rest.min.js --devtool source-map",
    "build:docs": "node scripts/generate-api-docs",
    "build:ts": "node scripts/generate-types",
    "coverage": "nyc report --reporter=html && open coverage/index.html",
    "coverage:upload": "nyc report --reporter=text-lcov | coveralls",
    "deploy-docs": "gh-pages-with-token -d doc",
    "generate-bundle-report": "webpack-bundle-analyzer dist/bundle-stats.json --mode=static --no-open --report dist/bundle-report.html",
    "generate-routes": "node scripts/generate-routes",
    "postbuild:docs": "apidoc -i doc/ -o doc/",
    "postvalidate:ts": "tsc --noEmit --target es6 test/typescript-validate.ts",
    "prebuild:browser": "mkdirp dist/",
    "prebuild:docs": "mkdirp doc/",
    "pretest": "standard",
    "prevalidate:ts": "npm run -s build:ts",
    "semantic-release": "semantic-release",
    "start-fixtures-server": "octokit-fixtures-server",
    "test": "nyc mocha test/mocha-node-setup.js \"test/**/*-test.js\"",
    "test:browser": "cypress run --browser chrome",
    "validate:ts": "tsc --target es6 --noImplicitAny index.d.ts"
  },
  "standard": {
    "globals": [
      "after",
      "afterEach",
      "before",
      "beforeEach",
      "cy",
      "describe",
      "expect",
      "it"
    ]
  },
  "types": "index.d.ts",
  "version": "16.8.0"
}
